// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sakeny.DbContexts;

#nullable disable

namespace sakeny.Migrations
{
    [DbContext(typeof(HOUSE_RENT_DBContext))]
    [Migration("20240313123355_remove_identity")]
    partial class remove_identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("sakeny.Entities.FeaturesTbl", b =>
                {
                    b.Property<decimal>("FeaturesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("FEATURES_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("FeaturesId"), 1L, 1);

                    b.Property<string>("FeaturesName")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("FEATURES_NAME");

                    b.HasKey("FeaturesId");

                    b.HasIndex(new[] { "FeaturesName" }, "FEATURES_INDEX")
                        .IsUnique()
                        .HasFilter("[FEATURES_NAME] IS NOT NULL");

                    b.ToTable("FEATURES_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.NotificationTbl", b =>
                {
                    b.Property<decimal>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("NOTIFICATION_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("NotificationId"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MESSAGE");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("TIMESTAMP");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("USER_ID");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("sakeny.Entities.PostFaviourateTbl", b =>
                {
                    b.Property<decimal>("PostFavId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_FAV_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("PostFavId"), 1L, 1);

                    b.Property<decimal>("PostId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_ID");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("USER_ID");

                    b.HasKey("PostFavId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("POST_FAV_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.PostFeaturesTbl", b =>
                {
                    b.Property<decimal?>("FeaturesId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("FEATURES_ID");

                    b.Property<decimal?>("PostId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_ID");

                    b.HasKey("FeaturesId", "PostId");

                    b.HasIndex("PostId");

                    b.HasIndex(new[] { "FeaturesId", "PostId" }, "POST_FEATURES_INDEX")
                        .IsUnique();

                    b.ToTable("POST_FEATURES_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.PostFeedbackTbl", b =>
                {
                    b.Property<decimal>("PostFeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_FEED_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("PostFeedId"), 1L, 1);

                    b.Property<DateTime?>("PostFeedDate")
                        .HasColumnType("date")
                        .HasColumnName("POST_FEED_DATE");

                    b.Property<string>("PostFeedText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_FEED_TEXT");

                    b.Property<TimeSpan?>("PostFeedTime")
                        .HasColumnType("time")
                        .HasColumnName("POST_FEED_TIME");

                    b.Property<decimal?>("PostId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_ID");

                    b.Property<decimal?>("UserId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("USER_ID");

                    b.HasKey("PostFeedId")
                        .HasName("PK_POST_FEED_TBL");

                    b.HasIndex("PostId");

                    b.HasIndex(new[] { "UserId", "PostId" }, "POST_FEED_INDEX")
                        .IsUnique()
                        .HasFilter("[USER_ID] IS NOT NULL AND [POST_ID] IS NOT NULL");

                    b.ToTable("POST_FEEDBACK_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.PostPicTbl", b =>
                {
                    b.Property<decimal>("PostPicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_PIC_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("PostPicId"), 1L, 1);

                    b.Property<byte[]>("Picture")
                        .HasColumnType("image")
                        .HasColumnName("PICTURE");

                    b.Property<decimal?>("PostId")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_ID");

                    b.HasKey("PostPicId");

                    b.HasIndex("PostId");

                    b.ToTable("POST_PIC_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.PostsTbl", b =>
                {
                    b.Property<decimal>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("POST_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("PostId"), 1L, 1);

                    b.Property<string>("PostAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_ADDRESS");

                    b.Property<decimal?>("PostArea")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("POST_AREA");

                    b.Property<int?>("PostBathrooms")
                        .HasColumnType("int")
                        .HasColumnName("POST_BATHROOMS");

                    b.Property<int?>("PostBedrooms")
                        .HasColumnType("int")
                        .HasColumnName("POST_BEDROOMS");

                    b.Property<string>("PostBody")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_BODY");

                    b.Property<string>("PostCategory")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_CATEGORY");

                    b.Property<string>("PostCity")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_CITY");

                    b.Property<string>("PostCurrency")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_CURRENCY");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("date")
                        .HasColumnName("POST_DATE");

                    b.Property<int?>("PostFloor")
                        .HasColumnType("int")
                        .HasColumnName("POST_FLOOR");

                    b.Property<int?>("PostKitchens")
                        .HasColumnType("int")
                        .HasColumnName("POST_KITCHENS");

                    b.Property<string>("PostLatitude")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_LATITUDE");

                    b.Property<string>("PostLongitude")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_LONGITUDE");

                    b.Property<bool?>("PostLookSea")
                        .HasColumnType("bit")
                        .HasColumnName("POST_LOOK_SEA");

                    b.Property<bool?>("PostPetsAllow")
                        .HasColumnType("bit")
                        .HasColumnName("POST_PETS_ALLOW");

                    b.Property<decimal?>("PostPriceAi")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("POST_PRICE_AI");

                    b.Property<decimal?>("PostPriceDisplay")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("POST_PRICE_DISPLAY");

                    b.Property<string>("PostPriceType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_PRICE_TYPE");

                    b.Property<string>("PostState")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_STATE");

                    b.Property<bool?>("PostStatue")
                        .HasColumnType("bit")
                        .HasColumnName("POST_STATUE");

                    b.Property<TimeSpan?>("PostTime")
                        .HasColumnType("time")
                        .HasColumnName("POST_TIME");

                    b.Property<string>("PostTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("POST_TITLE");

                    b.Property<decimal>("PostUserId")
                        .HasColumnType("numeric(18,0)");

                    b.HasKey("PostId");

                    b.HasIndex("PostUserId");

                    b.ToTable("POSTS_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.UserBanTbl", b =>
                {
                    b.Property<decimal>("UserBanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("USER_BAN_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("UserBanId"), 1L, 1);

                    b.Property<string>("UserBanNatId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_BAN_NAT_ID");

                    b.HasKey("UserBanId");

                    b.ToTable("USER_BAN_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.UserChatTbl", b =>
                {
                    b.Property<decimal>("UserChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("USER_CHAT_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("UserChatId"), 1L, 1);

                    b.Property<DateTime?>("UserChatDate")
                        .HasColumnType("date")
                        .HasColumnName("USER_CHAT_DATE");

                    b.Property<string>("UserChatFrom")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_CHAT_FROM");

                    b.Property<byte[]>("UserChatImage")
                        .HasColumnType("image")
                        .HasColumnName("USER_CHAT_IMAGE");

                    b.Property<string>("UserChatText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_CHAT_TEXT");

                    b.Property<TimeSpan?>("UserChatTime")
                        .HasColumnType("time")
                        .HasColumnName("USER_CHAT_TIME");

                    b.Property<string>("UserChatTo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_CHAT_TO");

                    b.Property<string>("UserChatType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_CHAT_TYPE");

                    b.HasKey("UserChatId");

                    b.ToTable("USER_CHAT_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.UserFeedbackTbl", b =>
                {
                    b.Property<decimal>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("FEEDBACK_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("FeedbackId"), 1L, 1);

                    b.Property<DateTime?>("FeedbackDate")
                        .HasColumnType("date")
                        .HasColumnName("FEEDBACK_DATE");

                    b.Property<string>("FeedbackFrom")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FEEDBACK_FROM");

                    b.Property<string>("FeedbackText")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FEEDBACK_TEXT");

                    b.Property<TimeSpan?>("FeedbackTime")
                        .HasColumnType("time")
                        .HasColumnName("FEEDBACK_TIME");

                    b.Property<string>("FeedbackTo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FEEDBACK_TO");

                    b.HasKey("FeedbackId")
                        .HasName("PK_FEEDBACKS_TBL");

                    b.ToTable("USER_FEEDBACK_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.UsersTbl", b =>
                {
                    b.Property<decimal>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("USER_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("UserId"), 1L, 1);

                    b.Property<string>("UserAccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_ACCOUNT_TYPE");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_ADDRESS");

                    b.Property<int>("UserAge")
                        .HasColumnType("int")
                        .HasColumnName("USER_AGE");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("USER_EMAIL");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("USER_FULL_NAME");

                    b.Property<string>("UserGender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_GENDER");

                    b.Property<string>("UserInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_INFO");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_NAME");

                    b.Property<string>("UserNatId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("USER_NAT_ID");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("USER_PASSWORD");

                    b.HasKey("UserId");

                    b.ToTable("USERS_TBL");
                });

            modelBuilder.Entity("sakeny.Entities.NotificationTbl", b =>
                {
                    b.HasOne("sakeny.Entities.UsersTbl", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sakeny.Entities.PostFaviourateTbl", b =>
                {
                    b.HasOne("sakeny.Entities.PostsTbl", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sakeny.Entities.UsersTbl", "User")
                        .WithMany("FavoritePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sakeny.Entities.PostFeaturesTbl", b =>
                {
                    b.HasOne("sakeny.Entities.FeaturesTbl", "Features")
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_POST_FEATURES_TBL_FEATURES_TBL");

                    b.HasOne("sakeny.Entities.PostsTbl", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_POST_FEATURES_TBL_POSTS_TBL");

                    b.Navigation("Features");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("sakeny.Entities.PostFeedbackTbl", b =>
                {
                    b.HasOne("sakeny.Entities.PostsTbl", "Post")
                        .WithMany("PostFeedbackTbls")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_POST_FEEDBACK_TBL_POSTS_TBL");

                    b.HasOne("sakeny.Entities.UsersTbl", "User")
                        .WithMany("PostFeedbackTbls")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_POST_FEEDBACK_TBL_USERS_TBL");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("sakeny.Entities.PostPicTbl", b =>
                {
                    b.HasOne("sakeny.Entities.PostsTbl", "Post")
                        .WithMany("PostPicTbls")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_POST_PIC_TBL_POSTS_TBL");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("sakeny.Entities.PostsTbl", b =>
                {
                    b.HasOne("sakeny.Entities.UsersTbl", "User")
                        .WithMany("Posts")
                        .HasForeignKey("PostUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("sakeny.Entities.PostsTbl", b =>
                {
                    b.Navigation("PostFeedbackTbls");

                    b.Navigation("PostPicTbls");
                });

            modelBuilder.Entity("sakeny.Entities.UsersTbl", b =>
                {
                    b.Navigation("FavoritePosts");

                    b.Navigation("Notifications");

                    b.Navigation("PostFeedbackTbls");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
